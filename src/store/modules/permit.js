/* eslint-disable no-empty-label */import * as Permits from "./../../config/permits"import asyncRoutes from "./../../router/asyncRouterMap"import constRoutes from "./../../router/constRoutes"/** * @2019/4/17 * @author: huiming * desc:  用户权限模块 * 权限为两种类型， 一个 是 page的权限（往往伴随左侧的side ）然后通过 router拦截 * 一个是 功能性权限 这个需要全局getter 出去判断 * 然后所有的权限都是基于权限数组里面  这个数组(属性对象)建议可以配置在前端, */export default {	state: {		routes: [],		addRoutes: []	},	mutations: {		SET_ROUTES: (state, routes) => {			state.addRoutes = routes			state.routes = constRoutes.concat(routes)		}	},	getters: {		permissionRoutes: (state) => state.routes	},	actions: {		GenerateRoutes({ commit }, roles) {			return new Promise(resolve => {				let accessedRoutes				if (roles.includes(Permits.admin)) {					accessedRoutes = asyncRoutes				} else {					accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)				}				commit('SET_ROUTES', accessedRoutes)				resolve(accessedRoutes)			})		}	}}function hasPermission(roles, route) {	if (route.meta && route.meta.roles) {		return roles.some(role => route.meta.roles.includes(role))	} else {		return true	}}/** * 递归过滤异步路由表，返回符合用户角色权限的路由表 * @param routes asyncRoutes * @param roles */export function filterAsyncRoutes(routes, roles) {	const res = []	routes.forEach(route => {		const tmp = { ...route }		if (hasPermission(roles, tmp)) {			if (tmp.children) {				tmp.children = filterAsyncRoutes(tmp.children, roles)			}			res.push(tmp)		}	})	return res}